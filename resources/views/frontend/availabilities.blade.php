<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Availability List</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col-md-12">
                <!-- Filters and Date Range Box -->
                <div class="d-flex align-items-center mb-3">
                    <!-- Category Filter -->
                    <form id="filterForm" method="GET" action="{{ route('frontend.availabilities') }}">
                        <div class="form-group mb-0">
                            <label for="category" class="sr-only">Category</label>
                            <select name="category" id="category" class="form-control">
                                <option value="">Select Category</option>
                                @foreach(config('categories') as $id => $name)
                                    <option value="{{ $id }}" {{ request('category') == $id ? 'selected' : '' }}>{{ $name }}</option>
                                @endforeach
                            </select>
                        </div>
                    </form>
    
                    <!-- Date Range -->
                    <div>
                        <span id="prevDate" class="btn btn-link">&#9664;</span>
                        <span id="dateRange" class="h5"></span>
                        <span id="nextDate" class="btn btn-link">&#9654;</span>
                    </div>
                </div>
    
                <!-- Availability Table Box -->
                <div class="card">
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead id="tableHeader">
                                <!-- Table header will be generated by JavaScript -->
                            </thead>
                            <tbody id="tableBody">
                                <!-- Table body will be generated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            function formatDateRange(startDate) {
                const options = { weekday: 'short', month: 'short', day: 'numeric' };

                // Calculate three consecutive dates
                const dates = [];
                for (let i = 0; i < 3; i++) {
                    let date = new Date(startDate);
                    date.setDate(startDate.getDate() + i);
                    dates.push(date.toLocaleDateString('en-US', options));
                }

                // Format the dates into a single string
                return dates.join(' - ');
            }

            function formatTime(timeString) {
                const [hours, minutes] = timeString.split(':').map(Number);
                const period = hours >= 12 ? 'PM' : 'AM';
                const formattedHours = ((hours + 11) % 12 + 1);
                return `${formattedHours}:${minutes.toString().padStart(2, '0')} ${period}`;
            }

            // Initialize the date range
            let currentDate = new Date('{{ $currentDate->toDateString() }}');
            document.getElementById('dateRange').innerHTML = `${formatDateRange(currentDate)}`;

            // Set up navigation buttons
            document.getElementById('prevDate').addEventListener('click', function() {
                currentDate.setDate(currentDate.getDate() - 3);
                window.location.href = '{{ route('frontend.availabilities') }}?date=' + currentDate.toISOString().split('T')[0] + '&category=' + document.getElementById('category').value;
            });

            document.getElementById('nextDate').addEventListener('click', function() {
                currentDate.setDate(currentDate.getDate() + 3);
                window.location.href = '{{ route('frontend.availabilities') }}?date=' + currentDate.toISOString().split('T')[0] + '&category=' + document.getElementById('category').value;
            });

            // Generate table header
            const dateRange = [
                new Date(currentDate),
                new Date(currentDate),
                new Date(currentDate)
            ];
            dateRange[1].setDate(dateRange[0].getDate() + 1);
            dateRange[2].setDate(dateRange[1].getDate() + 1);

            const tableHeader = document.getElementById('tableHeader');
            const headerRow = document.createElement('tr');
            dateRange.forEach(date => {
                const th = document.createElement('th');
                th.textContent = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                headerRow.appendChild(th);
            });
            tableHeader.appendChild(headerRow);

            // Generate table body
            const availabilities = @json($availabilities);
            const tableBody = document.getElementById('tableBody');

            // Prepare data for each date
            const dataByDate = {};
            dateRange.forEach(date => {
                dataByDate[date.toDateString()] = [];
            });

            availabilities.forEach(avail => {
                const availDate = new Date(avail.date).toDateString();
                if (dataByDate[availDate]) {
                    dataByDate[availDate].push(`${formatTime(avail.start_time)} - ${formatTime(avail.end_time)}`);
                }
            });

            // Create rows for each time slot
            const maxRows = Math.max(...Object.values(dataByDate).map(arr => arr.length));
            for (let i = 0; i < maxRows; i++) {
                const tr = document.createElement('tr');
                dateRange.forEach(date => {
                    const td = document.createElement('td');
                    const dateStr = date.toDateString();
                    td.textContent = dataByDate[dateStr][i] || '';
                    tr.appendChild(td);
                });
                tableBody.appendChild(tr);
            }
        });
    </script>
</body>
</html>
